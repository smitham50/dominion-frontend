{"version":3,"sources":["components/Card.js","logic/handleHandCard.js","logic/handleTreasureCard.js","logic/handleRemodel.js","logic/handleActionCard.js","logic/handleSupplyCard.js","StyledComponents/Button.js","containers/PlayerDeck.js","containers/PlayerDiscard.js","containers/PlayerHand.js","containers/PlayerArea.js","utils/cardNames.js","utils/setCards.js","containers/SupplyCards.js","components/PlayerTurnInfo.js","containers/SupplyArea.js","components/Trash.js","components/CardInfo.js","containers/PlayTable.js","App.js","serviceWorker.js","reducers/supplyreducer.js","reducers/gamereducer.js","reducers/playeronereducer.js","reducers/playertworeducer.js","index.js"],"names":["CardImage","styled","img","_templateObject","Card","componentWillUnmount","_this","props","trash","includes","card","hoverOff","handleClick","className","player","hand1","hand2","militia","militiaDefend1","militiaDefend2","militiaDiscardFirst","militiaDiscardSecond","militiaDiscardFirst1","militiaDiscardFirst2","militiaDiscardSecond1","militiaDiscardSecond2","militiaBreak","cellar1","cellar2","cellarDiscard1","cellarDiscard2","playerTurn","remodel","name","length","card_type","playTreasureCard1","playTreasureCard2","trashTreasure1","trashTreasure2","mine","trashRemodel1","trashRemodel2","handleTreasureCard","handleRemodel","playAction1","playAction2","actions1","actions2","triggerDispatch1","triggerDispatch2","deck1","deck2","triggers","forEach","trigger","concat","handleActionCard","handleHandCard","buyCard1","buyCard2","wallet1","wallet2","buys1","buys2","gainRemodel1","gainRemodel2","remodelGain","remodelValue","workshop","gainWorkshop1","gainWorkshop2","cost","handleSupplyCard","_this2","this","_this$props","index","id","react_default","a","createElement","Fragment","src","process","picture","alt","onClick","onMouseEnter","hoverOn","onMouseLeave","React","Component","connect","state","_state$supply","supply","isHovered","_state$playerOne","playerOne","turns1","_state$playerTwo","playerTwo","turns2","dispatch","type","payload","deck","treasure","trashVictory1","trashVictory2","Button","button","Button_templateObject","PlayerDeckContainer","div","PlayerDeck_templateObject","PlayerDeck","turns","handleDeal","map","components_Card","key","StyledComponents_Button","PlayerDiscardContainer","PlayerDiscard_templateObject","PlayerDiscard","discard","PlayerHandContainer","PlayerHand_templateObject","PlayerHand","handleDraw","hand","PlayerCardsContainer","PlayerArea_templateObject","discard1","discard2","deal","draw","cycle","containers_PlayerDiscard","containers_PlayerDeck","handleCycle","containers_PlayerHand","cardNames","setCards","cards","_step","_iterator","Object","createForOfIteratorHelper","_loop","cardName","value","allCardsofType","filter","store","toUpperCase","s","n","done","err","e","f","SupplyCardContainer","SupplyCards_templateObject","CardContainer","_templateObject2","coppers","silvers","golds","estates","duchys","provinces","cellars","moats","workshops","woodcutters","villages","militias","smithys","remodels","markets","mines","useEffect","axios","get","then","resp","data","renderCards","cardType","toLowerCase","PlayerInfoContainer","PlayerTurnInfo_templateObject","PlayerTag","PlayerTurnInfo_templateObject2","InfoBox","_templateObject3","PlayerTurnInfo","actions","buys","wallet","victoryPoints","Message","SupplyArea_templateObject","InteractiveDiv","SupplyArea_templateObject2","SupplyAreaContainer","SupplyArea_templateObject3","Margin","_templateObject4","GameEnd","_templateObject5","victoryPoints1","victoryPoints2","game","gameEnd","workshopGain","gameStart1","gameStart2","endTurn1","endTurn2","endCellar1","endCellar2","components_PlayerTurnInfo","containers_SupplyCards","TrashContainer","Trash_templateObject","setTrash","CardInfoContainer","CardInfo_templateObject","hoverCard","description","PlayTableContainer","PlayTable_templateObject","PlayerAreaContainer","PlayTable_templateObject2","containers_SupplyArea","containers_PlayerArea","components_CardInfo","components_Trash","AppContainer","App_templateObject","App","containers_PlayTable","Boolean","window","location","hostname","match","defaultState","cellarHand","emptyPiles","supplyReducer","prevState","arguments","undefined","action","shuffle","require","objectSpread2","endHand","toConsumableArray","endDiscard","shuffleDeck","slice","militiaDefend","_objectSpread3","_objectSpread4","_objectSpread6","pile","keys","find","defineProperty","_objectSpread8","_objectSpread9","_objectSpread11","_objectSpread12","_objectSpread13","_objectSpread14","_objectSpread15","_objectSpread16","_objectSpread17","cycleHand","some","gameReducer","playerOneReducer","victory_points","playerTwoReducer","rootReducer","combineReducers","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf5590ed.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport handleHandCard from '../logic/handleHandCard';\nimport handleSupplyCard from '../logic/handleSupplyCard';\nimport styled from 'styled-components';\n\nconst CardImage = styled.img`\n  height: 90%;\n`;\n\nclass Card extends React.Component {\n\n  componentWillUnmount = () => {  \n    if (!this.props.trash.includes(this.props.card)) {\n      this.props.hoverOff() \n    }\n  };\n\n  handleClick = () => {\n    const { className } = this.props\n    \n    if (className === \"hand-card\") {\n      handleHandCard(this.props);\n    } else if (className === \"supply-card\") {\n      handleSupplyCard(this.props);\n    }\n  };\n  \n  render() {\n    const { \n      index, id, card, player, playerTurn, \n      className, militia, militiaDiscardSecond \n    } = this.props\n    \n    return(\n      <>\n        {\n          index === 0 \n          ?\n          <CardImage src={\n            id === \"deck-card\" || \n            (className === \"hand-card\" && !militia && !militiaDiscardSecond && \n            ((!playerTurn && player === \"2\") ||\n            (playerTurn && player === \"1\"))) \n            ? \n              process.env.PUBLIC_URL + \"/card-images/cardback.jpg\" \n            : \n              process.env.PUBLIC_URL + card.picture} alt=\"\" onClick={() => this.handleClick()} \n              onMouseEnter={\n                className === \"supply-card\" ||\n                (className === \"hand-card\" && !militia && !militiaDiscardSecond &&\n                ((!playerTurn && player === \"1\") ||\n                (playerTurn && player === \"2\")))\n                ? \n                  () => this.props.hoverOn(this) \n                : \n                  null\n              } \n              onMouseLeave={this.props.hoverOff} />\n          : \n          <CardImage src={\n              id === \"deck-card\" ||\n              (className === \"hand-card\" && !militia && !militiaDiscardSecond &&\n              ((!playerTurn && player === \"2\") ||\n              (playerTurn && player === \"1\"))) \n            ? \n              process.env.PUBLIC_URL + \"/card-images/cardback.jpg\" \n            :\n            process.env.PUBLIC_URL + card.picture} alt=\"\" className=\"rest\" onClick={() => this.handleClick()} \n            onMouseEnter={\n              className === \"supply-card\" || \n              (className === \"hand-card\" && !militia && !militiaDiscardSecond &&\n              ((!playerTurn && player === \"1\") ||\n              (playerTurn && player === \"2\")))\n              ? \n                () => this.props.hoverOn(this) \n              : \n                null\n            } \n            onMouseLeave={this.props.hoverOff} />\n          }\n      </>\n    )\n  };\n\n};\n\nfunction msp(state) {\n\n  const { \n    playerTurn, deck1, deck2, hand1, hand2, mine, remodel, remodelGain, \n    remodelValue, workshop, militia, militiaDiscardFirst, militiaDiscardSecond,\n    cellar1, cellar2, isHovered, trash\n  } = state.supply;\n  const { wallet1, buys1, turns1, actions1 } = state.playerOne;\n  const { wallet2, buys2, turns2, actions2 } = state.playerTwo;\n\n  return {\n\n    isHovered,\n    playerTurn,\n    mine,\n    remodel,\n    remodelGain,\n    remodelValue,\n    workshop,\n    militia,\n    militiaDiscardFirst,\n    militiaDiscardSecond,\n    cellar1,\n    cellar2,\n    trash,\n\n\n    wallet1,\n    buys1,\n    turns1,\n    actions1,\n    deck1,\n    hand1,\n\n    wallet2,\n    buys2,\n    turns2,\n    actions2,\n    deck2,\n    hand2\n\n  };\n\n};\n\nfunction mdp(dispatch) {\n  return {\n    buyCard1: (card) => {\n      dispatch({ type: \"BUY1\", payload: card})\n    },\n    buyCard2: (card) => {\n      dispatch({ type: \"BUY2\", payload: card})\n    },\n    playTreasureCard1: (card) => {\n      dispatch({ type: \"PLAY_TREASURE1\", payload: card })\n    },\n    playTreasureCard2: (card) => {\n      dispatch({ type: \"PLAY_TREASURE2\", payload: card })\n    },\n    playAction1: (card, deck) => {\n      dispatch({ type: \"ACTION1\", payload: card, deck: deck })\n    },\n    playAction2: (card, deck) => {\n      dispatch({ type: \"ACTION2\", payload: card, deck: deck })\n    },\n    triggerDispatch1: (trigger) => {\n      dispatch({ type: trigger })\n    },\n    triggerDispatch2: (trigger) => {\n      dispatch({ type: trigger })\n    },\n    trashTreasure1: (card, treasure) => {\n      dispatch({ type: \"TRASH_TREASURE1\", payload: card, treasure: treasure })\n    },\n    trashTreasure2: (card, treasure) => {\n      dispatch({ type: \"TRASH_TREASURE2\", payload: card, treasure: treasure })\n    },\n    trashRemodel1: (card) => {\n      dispatch({ type: \"TRASH_REMODEL1\", payload: card })\n    },\n    trashRemodel2: (card) => {\n      dispatch({ type: \"TRASH_REMODEL2\", payload: card })\n    },\n    trashVictory1: (card) => {\n      dispatch({ type: \"TRASH_VICTORY1\", payload: card})\n    },\n    trashVictory2: (card) => {\n      dispatch({ type: \"TRASH_VICTORY2\", payload: card })\n    },\n    gainRemodel1: (card) => {\n      dispatch({ type: \"GAIN_REMODEL1\", payload: card })\n    },\n    gainRemodel2: (card) => {\n      dispatch({ type: \"GAIN_REMODEL2\", payload: card })\n    },\n    gainWorkshop1: (card) => {\n      dispatch({ type: \"GAIN_WORKSHOP1\", payload: card })\n    },\n    gainWorkshop2: (card) => {\n      dispatch({ type: \"GAIN_WORKSHOP2\", payload: card })\n    },\n    militiaDefend1: (card) => {\n      dispatch({ type: \"MILITIA_DEFEND1\", payload: card })\n    },\n    militiaDefend2: (card) => {\n      dispatch({ type: \"MILITIA_DEFEND2\", payload: card })\n    },\n    militiaDiscardFirst1: (card) => {\n      dispatch({ type: \"MILITIA_DISCARD_FIRST1\", payload: card })\n    },\n    militiaDiscardFirst2: (card) => {\n      dispatch({ type: \"MILITIA_DISCARD_FIRST2\", payload: card })\n    },\n    militiaDiscardSecond1: (card) => {\n      dispatch({ type: \"MILITIA_DISCARD_SECOND1\", payload: card })\n    },\n    militiaDiscardSecond2: (card) => {\n      dispatch({ type: \"MILITIA_DISCARD_SECOND2\", payload: card })\n    },\n    militiaBreak: () => {\n      dispatch({ type: \"MILITIA_BREAK\" })\n    },\n    cellarDiscard1: (card) => {\n      dispatch({ type: \"CELLAR_DISCARD1\", payload: card })\n    },\n    cellarDiscard2: (card) => {\n      dispatch({ type: \"CELLAR_DISCARD2\", payload: card })\n    },\n    hoverOn: (card) => {\n      dispatch({ type: \"HOVER_ON\", payload: card })\n    },\n    hoverOff: () => {\n      dispatch({ type: \"HOVER_OFF\" })\n    }\n  };\n\n};\n\nexport default connect(msp, mdp)(Card);","import handleTreasureCard from './handleTreasureCard';\nimport handleActionCard from './handleActionCard';\nimport handleRemodel from './handleRemodel';\n\nexport default function handleHandCard(props) {\n    const { \n        player,  hand1, hand2, militia, militiaDefend1, militiaDefend2,\n        militiaDiscardFirst, militiaDiscardSecond, militiaDiscardFirst1, \n        militiaDiscardFirst2, militiaDiscardSecond1, militiaDiscardSecond2,\n        militiaBreak, cellar1, cellar2, cellarDiscard1, cellarDiscard2,\n        card, playerTurn, remodel\n    } = props;\n\n    if (!militia && !militiaDiscardSecond) {\n        // PLAY TREASURE CARD OR TRASH TREASURE CARD IF MINE OR REMODEL PLAYED\n        if (!cellar1 && !cellar2) {\n            if (card.card_type === \"Treasure\") {\n                handleTreasureCard(props);\n            }\n            // PLAY ACTION CARD\n            else if (card.card_type === \"Action\" && !remodel) {\n                handleActionCard(props);\n            }\n            // REMODEL ACTION OR VICTORY CARD\n            else if (\n                remodel &&\n                (card.card_type === \"Action\" || card.card_type === \"Victory\")\n            ) {\n                handleRemodel(props);\n            }\n        }\n        // CELLAR\n        else if (\n            cellar1 &&\n            player === \"1\" &&\n            !playerTurn\n        ) {\n            cellarDiscard1(card);\n        } else if (\n            cellar2 &&\n            player === \"2\" &&\n            playerTurn\n        ) {\n            cellarDiscard2(card);\n        }\n    }\n    // MILITIA RESPONSES\n    // MOAT OR MILITIA DISCARD FIRST\n    else if (militia && militiaDiscardFirst) {\n        if (!playerTurn && player === \"2\") {\n            if (card.name !== \"Moat\") {\n                militiaDiscardFirst1(card)\n            } else {\n                militiaDefend1(card)\n            }\n        } else if (playerTurn && player === \"1\") {\n            if (card.name !== \"Moat\") {\n                militiaDiscardFirst2(card)\n            } else {\n                militiaDefend2(card)\n            }\n        }\n    }\n    // MILITIA DISCARD SECOND\n    else if (militiaDiscardSecond) {\n        if (\n            !playerTurn &&\n            player === \"2\" &&\n            hand2.length > 3\n        ) {\n            militiaDiscardSecond1(card)\n        } else if (\n            playerTurn &&\n            player === \"1\" &&\n            hand1.length > 3\n        ) {\n            militiaDiscardSecond2(card)\n        } else if (hand1.length <= 3 || hand2.length <= 3) {\n            militiaBreak()\n        }\n    }\n}","export default function handleTreasureCard(props) {\n    const {\n        playTreasureCard1, playTreasureCard2, trashTreasure1,\n        trashTreasure2, mine, card, remodel, trashRemodel1,\n        trashRemodel2, player, playerTurn\n    } = props;\n\n    if (player === \"1\" && !playerTurn) {\n        if (!mine && !remodel) {\n            playTreasureCard1(card)\n        } else if (mine) {\n            if (card.name === \"Copper\") {\n                trashTreasure1(card, \"silvers\")\n            } else if (card.name === \"Silver\") {\n                trashTreasure1(card, \"golds\")\n            }\n        } else if (remodel) {\n            trashRemodel1(card)\n        }\n    }\n    else if (player === \"2\" && playerTurn) {\n        if (!mine && !remodel) {\n            playTreasureCard2(card)\n        } else if (mine) {\n            if (card.name === \"Copper\") {\n                trashTreasure2(card, \"silvers\")\n            } else if (card.name === \"Silver\") {\n                trashTreasure2(card, \"golds\")\n            }\n        } else if (remodel) {\n            trashRemodel2(card)\n        }\n    }\n}","export default function handleRemodel(props) {\n    const {\n        trashRemodel1, trashRemodel2, player,\n        playerTurn, card\n    } = props;\n\n    if (player === \"1\" && !playerTurn) {\n        trashRemodel1(card);\n    } else if (player === \"2\" && playerTurn) {\n        trashRemodel2(card);\n    }\n}","export default function handleActionCard(props) {\n    const {\n        playAction1, playAction2, actions1, actions2,\n        triggerDispatch1, triggerDispatch2, deck1, deck2,\n        player, playerTurn, card\n    } = props;\n\n    if (player === \"1\" && !playerTurn && actions1 > 0) {\n        playAction1(card, deck1)\n        card.triggers.forEach(trigger => {\n            triggerDispatch1(`${trigger}1`)\n        })\n    } else if (player === \"2\" && playerTurn && actions2 > 0) {\n        playAction2(card, deck2)\n        card.triggers.forEach(trigger => {\n            triggerDispatch2(`${trigger}2`)\n        })\n    }\n}","export default function handleSupplyCard(props) {\n    const {\n        card, playerTurn, buyCard1, buyCard2, wallet1, wallet2,\n        buys1, buys2, gainRemodel1, gainRemodel2, remodelGain, remodelValue,\n        workshop, gainWorkshop1, gainWorkshop2\n    } = props;\n\n    // BUY SUPPLY CARD\n    if (!remodelGain && !workshop) {\n        if (\n            !playerTurn &&\n            buys1 > 0 &&\n            card.cost <= wallet1\n        ) {\n            buyCard1(card);\n        } else if (\n            playerTurn &&\n            buys2 > 0 &&\n            card.cost <= wallet2\n        ) {\n            buyCard2(card);\n        }\n    }\n    // WORKSHOP GAIN CARD\n    else if (workshop && card.cost <= 4) {\n        if (!playerTurn) {\n            gainWorkshop1(card);\n        } else if (playerTurn) {\n            gainWorkshop2(card);\n        }\n    }\n    // REMODEL GAIN CARD\n    else if (remodelGain && card.cost <= remodelValue) {\n        if (!playerTurn) {\n            gainRemodel1(card);\n        } else if (playerTurn) {\n            gainRemodel2(card);\n        }\n    }\n};","import styled from 'styled-components';\n\nconst Button = styled.button`\n  width: 100%;\n  height: 100%;\n  font-family: \"Saira Semi Condensed\", sans-serif;\n  font-size: 1em;\n  background: #38add4;\n  color: white;\n  border: solid 1px #4c4c4c;\n  border-radius: 3px;\n`;\n\nexport default Button;","import React from 'react';\nimport Card from '../components/Card';\nimport styled from 'styled-components';\nimport Button from '../StyledComponents/Button';\n\nconst PlayerDeckContainer = styled.div`\n  width: 25%;\n\n  & .rest {\n    margin-left: -63%;\n  }\n`;\n\nconst PlayerDeck = (props) => {\n  const {\n    deck,\n    player,\n    turns,\n    handleDeal\n  } = props;\n\n  const renderDeck = () => {\n    return deck.map((card, index) => {\n      return  <Card \n                key={card.id} \n                card={card} \n                index={index} \n                id=\"deck-card\" \n              />\n    });\n  };\n\n  return (\n    <PlayerDeckContainer>\n      {\n        deck.length > 0\n          ? renderDeck()\n          : turns === 0\n              && <Button onClick={() => handleDeal(player)}>Deal Cards</Button>\n      }\n    </PlayerDeckContainer>\n  );\n};\n\nexport default PlayerDeck;","import React from 'react';\nimport Card from '../components/Card';\nimport styled from 'styled-components';\n\nconst PlayerDiscardContainer = styled.div`\n  width: 25%;\n\n  & .rest {\n    margin-left: -63%;\n  }\n`;\n\nconst PlayerDiscard = (props) => {\n  const renderDiscard = () => {\n    return props.discard.map((card, index) => {\n      return  <Card \n                key={card.id} \n                card={card} \n                index={index} \n                className=\"discard-card\" \n              />\n    });\n  };\n\n  return (\n    <PlayerDiscardContainer>\n      { props.discard.length > 0 && renderDiscard() }\n    </PlayerDiscardContainer>\n  );\n};\n\nexport default PlayerDiscard;","import React from 'react';\nimport Card from '../components/Card';\nimport styled from 'styled-components';\nimport Button from '../StyledComponents/Button';\n\nconst PlayerHandContainer = styled.div`\n  width: 50%;\n\n  & .rest {\n    margin-left: -17%;\n  }\n`;\n\nconst PlayerHand = (props) => {\n  const { \n    player, \n    deck, \n    handleDraw, \n    turns, \n    hand \n  } = props;\n\n  const renderHand = () => {\n    return hand.map((card, index) => {\n      return  <Card \n                key={card.id} \n                card={card} \n                index={index} \n                player={player} \n                className=\"hand-card\" \n              />\n    });\n  };\n\n  return (\n    <PlayerHandContainer>\n      {\n        hand.length > 0\n          ? renderHand()\n          : turns === 0 && deck.length > 0\n            && <Button onClick={() => handleDraw(player)}>Draw Hand</Button>\n      }\n    </PlayerHandContainer>\n  );\n};\n\nexport default PlayerHand;","import React from 'react';\nimport PlayerDeck from './PlayerDeck';\nimport PlayerDiscard from './PlayerDiscard';\nimport PlayerHand from './PlayerHand';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nconst PlayerCardsContainer = styled.div`\n    width: 43%;\n    height: 100%;\n    display: flex;\n\n    & > * {\n        border: solid 1px #4c4c4c;\n        border-radius: 3px;\n        height: 100%;\n        display: flex;\n        overflow: auto;\n        padding-left: 2px;\n    }\n\n    & > * img {\n        height: 67%;\n        margin-left: 0%;\n        margin-top: 8%;\n    }\n\n    & > *::-webkit-scrollbar-track {\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n        border-radius: 10px;\n        background-color: #0a0a0a47;\n    }\n\n    & > *::-webkit-scrollbar {\n        width: 6px;\n        height: 6px;\n        background-color: #0a0a0a47;\n    }\n\n    & > *::-webkit-scrollbar-thumb {\n        border-radius: 10px;\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, .3);\n        background-color: #90909099;\n    }\n`;\n\nconst PlayerArea = (props) => {\n    const {\n        deck1,\n        deck2,\n        discard1,\n        discard2,\n        hand1,\n        hand2,\n        turns1,\n        turns2,\n        deal,\n        draw,\n        cycle,\n        player\n    } = props;\n\n    return (\n        <PlayerCardsContainer>\n            {\n                player === \"1\" \n                ?\n                <>\n                    <PlayerDiscard\n                        key={player === \"1\" ? \"discard1\" : \"discard2\"}\n                        discard={player === \"1\" ? discard1 : discard2}\n                        player={player}\n                    />\n                    <PlayerDeck\n                        key={player === \"1\" ? \"deck1\" : \"deck2\"}\n                        deck={player === \"1\" ? deck1 : deck2}\n                        handleDeal={deal}\n                        player={player}\n                        turns={player === \"1\" ? turns1 : turns2}\n                        handleCycle={cycle}\n                    />\n                    <PlayerHand\n                        key={player === \"1\" ? \"hand1\" : \"hand2\"}\n                        hand={player === \"1\" ? hand1 : hand2}\n                        handleDraw={draw}\n                        player={player}\n                        turns={player === \"1\" ? turns1 : turns2}\n                        deck={player === \"1\" ? deck1 : deck2}\n                    />\n                </>\n                :\n                <>\n                    <PlayerHand\n                        key={player === \"1\" ? \"hand1\" : \"hand2\"}\n                        hand={player === \"1\" ? hand1 : hand2}\n                        handleDraw={draw}\n                        player={player}\n                        turns={player === \"1\" ? turns1 : turns2}\n                        deck={player === \"1\" ? deck1 : deck2}\n                    />\n                    <PlayerDeck\n                        key={player === \"1\" ? \"deck1\" : \"deck2\"}\n                        deck={player === \"1\" ? deck1 : deck2}\n                        handleDeal={deal}\n                        player={player}\n                        turns={player === \"1\" ? turns1 : turns2}\n                        handleCycle={cycle}\n                    />\n                    <PlayerDiscard\n                        key={player === \"1\" ? \"discard1\" : \"discard2\"}\n                        discard={player === \"1\" ? discard1 : discard2}\n                        player={player}\n                    />\n                </>\n            }\n        </PlayerCardsContainer>\n    );\n};\n\nfunction msp(state) {\n    const { \n        deck1,\n        deck2,\n        discard1,\n        discard2, \n        hand1, \n        hand2,\n    } = state.supply;\n\n    const { turns1 } = state.playerOne;\n    const { turns2 } = state.playerTwo;\n\n    return {\n        deck1,\n        deck2,\n        discard1,\n        discard2,\n        hand1,\n        hand2,\n        turns1,\n        turns2\n    };\n};\n\nfunction mdp(dispatch) {\n    return {\n        deal: (player) => {\n            dispatch({ type: player === \"1\" ? \"DEAL1\" : \"DEAL2\" })\n        },\n        draw: (player) => {\n            dispatch({ type: player === \"1\" ? \"DRAW1\" : \"DRAW2\" })\n        },\n        cycle: (player) => {\n            dispatch({ type: player === \"1\" ? \"CYCLE1\" : \"CYCLE2\" })\n        }\n    };\n};\n\nexport default connect(msp, mdp)(PlayerArea);","const cardNames = [\n    'Copper',\n    'Silver',\n    'Gold',\n    'Cellar',\n    'Moat',\n    'Workshop',\n    'Woodcutter',\n    'Village',\n    'Estate',\n    'Duchy',\n    'Province',\n    'Smithy',\n    'Militia',\n    'Remodel',\n    'Market',\n    'Mine'\n];\n\nexport default cardNames;","import store from '../index';\nimport cardNames from './cardNames';\n\nfunction setCards(cards) {\n    for (let cardName of cardNames) {\n        const allCardsofType = cards.filter(card => {\n            return card.name === cardName;\n        });\n\n        store.dispatch({ type: cardName.toUpperCase() + 'S', payload: allCardsofType });\n    };\n};\n\nexport default setCards;","import React, { useEffect } from 'react';\nimport Card from '../components/Card';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport setCards from '../utils/setCards';\nimport cardNames from '../utils/cardNames';\nimport styled from 'styled-components';\n\nconst SupplyCardContainer = styled.div`\n    border-radius: 3px;\n    display: grid;\n    grid-template-columns: auto auto auto auto auto auto auto auto;\n    grid-template-rows: 45% 45%;\n    justify-content: space-evenly;\n    column-gap: 0.5%;\n    width: 100%;\n    height: 100%;\n    padding: 3%;\n`;\n\nconst CardContainer = styled.div`\n    height: 80%;\n    width: 100%;\n    overflow: hidden;\n\n    .rest {\n        margin-left: -68.2%;\n    }\n`;\n\nconst SupplyCards = (props) => {\n    useEffect(() => {\n        axios.get('https://blooming-sierra-89816.herokuapp.com/api/v1/cards')\n            .then(resp => {\n                const cards = resp.data;\n                setCards(cards);\n            });\n    }, []);\n\n    const renderCardContainers = () => {\n        return cardNames.map((cardName, index) => {\n            const cardType = cardName.toLowerCase() + 's';\n            return  <CardContainer \n                        key={index} \n                        id={cardType} \n                    >\n                        {renderCards(cardType)}\n                    </CardContainer>\n        });\n    };\n\n    const renderCards = (cardType) => {\n        return props[cardType].map((card, index) => {\n            return  <Card \n                        key={card.id} \n                        card={card} \n                        index={index} \n                        className=\"supply-card\" \n                    />\n        });\n    };\n\n    return (\n        <SupplyCardContainer>\n            { renderCardContainers() }\n        </SupplyCardContainer>\n    );\n};\n\nfunction msp(state) {\n    const {\n        coppers, \n        silvers, \n        golds, \n        estates, \n        duchys, \n        provinces, \n        cellars,\n        moats, \n        workshops, \n        woodcutters, \n        villages, \n        militias, \n        smithys,\n        remodels, \n        markets, \n        mines\n    } = state.supply;\n\n    return {\n        coppers,\n        silvers,\n        golds,\n        estates,\n        duchys,\n        provinces,\n        cellars,\n        moats,\n        workshops,\n        woodcutters,\n        villages,\n        militias,\n        smithys,\n        remodels,\n        markets,\n        mines\n    };\n};\n\nexport default connect(msp, null)(SupplyCards);","import React from 'react';\nimport styled from 'styled-components';\n\nconst PlayerInfoContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  background: #0000002b;\n  color: white;\n  padding-left: 5%;\n  flex-direction: column;\n  height: 75%;\n`;\n\nconst PlayerTag = styled.div`\n  height: 9%;\n`;\n\nconst InfoBox = styled.div`\n  height: 7%;\n`;\n\nconst PlayerTurnInfo = (props) => {\n  const {\n    player,\n    actions,\n    buys,\n    wallet,\n    victoryPoints\n  } = props;\n\n  return(\n    <PlayerInfoContainer>\n      <PlayerTag>\n        <h3>{player}</h3>\n      </PlayerTag>\n      <InfoBox>{`Actions: ${actions}`}</InfoBox>\n      <InfoBox>{`Buys: ${buys}`}</InfoBox>\n      <InfoBox>{`Wallet: ${wallet}`}</InfoBox>\n      <InfoBox>{`VPs: ${victoryPoints}`}</InfoBox>\n    </PlayerInfoContainer>\n  );\n};\n\n\nexport default PlayerTurnInfo;","import React from 'react';\nimport SupplyCards from './SupplyCards';\nimport PlayerTurnInfo from '../components/PlayerTurnInfo';\nimport Button from '../StyledComponents/Button';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nconst Message = styled.div`\n  padding-left: 3%;\n  padding-right: 3%;\n  background: #fdb80e;\n  color: white;\n  border: solid 1px #4c4c4c;\n  height: 100%;\n  text-align: center;\n`;\n\nconst InteractiveDiv = styled.div`\n  height: 25%;\n  background: #0000002b;\n\n  & .cellar-button {\n    background: #fdb80e;\n  }\n`;\n\nconst SupplyAreaContainer = styled.div`\n  width: 100%;\n  height: 75%;\n  display: flex;SupplyAreaContainer\n`;\n\nconst Margin = styled.div`\n  width: 7.5%;\n  border: solid 1px #4c4c4c;\n  border-radius: 3px;\n`;\n\nconst GameEnd = styled.div`\n  width: 100%;\n  text-align: center;\n  padding-top: 200px;\n  font-size: 5em;\n  background: #d3e7e800;\n  color: white;\n`;\n\nconst SupplyArea = (props) => {\n  const {\n    actions1, buys1, wallet1, victoryPoints1, turns1, actions2,\n    buys2, wallet2, victoryPoints2, turns2, playerTurn, endTurn1,\n    endTurn2, cellar1, cellar2, gameEnd, militia, remodelGain,\n    remodelValue, workshop, remodel, militiaDiscardSecond, mine,\n    gameStart1, gameStart2, endCellar1, endCellar2 } = props;\n\n  return (\n    <SupplyAreaContainer>\n      <Margin>\n        <PlayerTurnInfo\n          key=\"player1\"\n          player=\"Player 1\"\n          actions={actions1}\n          buys={buys1}\n          wallet={wallet1}\n          victoryPoints={victoryPoints1}\n          turns={turns1}\n        />\n        <InteractiveDiv>\n          {\n            cellar1\n              ? <Button className=\"cellar-button\" onClick={endCellar1} >End Discard</Button>\n              : !playerTurn && remodel\n                ? <Message>Trash card and gain card from supply worth up to 2 more</Message>\n                : !playerTurn && remodelGain\n                  ? <Message>Gain card from supply costing up to {remodelValue}</Message>\n                  : !playerTurn && mine\n                    ? <Message>Trash a treasure card for treasure costing up to 3 more</Message>\n                    : !playerTurn && workshop\n                      ? <Message>Gain card from supply costing up to 4</Message>\n                      : playerTurn && (militia || militiaDiscardSecond)\n                        ? <Message>Discard 2 cards or play Moat</Message>\n                        : !playerTurn && !cellar1 && !gameEnd && gameStart1 && gameStart2 && (!militia && !militiaDiscardSecond)\n                          && <Button onClick={endTurn1} >End Turn</Button>\n          }\n        </InteractiveDiv>\n      </Margin>\n      {\n        gameEnd\n          ? <GameEnd>\n              {\n                victoryPoints1 > victoryPoints2\n                  ? \"Player 1 Wins!\"\n                  : \"Player 2 Wins!\"\n              }\n            </GameEnd>\n          : <>\n              <SupplyCards />\n            </>\n      }\n      <Margin>\n        <PlayerTurnInfo\n          key=\"player2\"\n          player=\"Player 2\"\n          actions={actions2}\n          buys={buys2}\n          wallet={wallet2}\n          victoryPoints={victoryPoints2}\n          turns={turns2}\n        />\n        <InteractiveDiv>\n          {\n            cellar2\n              ? <Button className=\"cellar-button\" onClick={endCellar2} >End Discard</Button>\n              : playerTurn && remodel\n                ? <Message>Trash card and gain card from supply costing up to 2 more</Message>\n                : playerTurn && remodelGain\n                  ? <Message>Gain card from supply costing up to {remodelValue}</Message>\n                  : playerTurn && mine\n                    ? <Message>Trash a treasure card for treasure costing up to 3 more</Message>\n                    : playerTurn && workshop\n                      ? <Message>Gain card from supply costing up to 4</Message>\n                      : !playerTurn && (militia || militiaDiscardSecond)\n                        ? <Message>Discard 2 cards or play Moat</Message>\n                        : playerTurn && !cellar2 && !gameEnd && gameStart1 && gameStart2 && (!militia && !militiaDiscardSecond)\n                          && <Button onClick={endTurn2} >End Turn</Button>\n          }\n        </InteractiveDiv>\n      </Margin>\n    </SupplyAreaContainer>\n  );\n};\n\nfunction msp(state) {\n  const { actions1, buys1, wallet1, victoryPoints1, turns1 } = state.playerOne\n  const { actions2, buys2, wallet2, victoryPoints2, turns2 } = state.playerTwo\n  const { playerTurn } = state.game\n  const { cellar1, cellar2, gameEnd, militia, militiaDiscardFirst, \n          militiaDiscardSecond, workshopGain, remodelGain, remodelValue,\n          workshop, remodel, mine, gameStart1, gameStart2 } = state.supply\n\n  return {\n    actions1,\n    buys1,\n    wallet1,\n    victoryPoints1,\n    turns1,\n    gameStart1,\n\n    actions2,\n    buys2,\n    wallet2,\n    victoryPoints2,\n    turns2,\n    gameStart2,\n\n    playerTurn,\n    gameEnd,\n\n    cellar1,\n    cellar2,\n    militia,\n    militiaDiscardFirst,\n    militiaDiscardSecond,\n    workshopGain,\n    workshop,\n    remodel,\n    remodelGain,\n    remodelValue,\n    mine\n  }\n\n}\n\nfunction mdp(dispatch) {\n  return {\n    endTurn1: () => {\n      dispatch({ type: \"TURN1\" })\n    },\n    endTurn2: () => {\n      dispatch({ type: \"TURN2\" })\n    },\n    draw: () => {\n      dispatch({ type: \"DRAW1\" })\n    },\n    endCellar1: () => {\n      dispatch({ type: \"END_CELLAR1\" })\n    },\n    endCellar2: () => {\n      dispatch({ type: \"END_CELLAR2\" })\n    }\n  }\n}\n\nexport default connect(msp, mdp)(SupplyArea);","import React, { useEffect } from 'react';\nimport Card from './Card';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport styled from 'styled-components';\n\nconst TrashContainer = styled.div`\n  width: 14%;\n  border: solid 1px #4c4c4c;\n  border-radius: 3px;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  overflow: auto;\n\n  & > img {\n    height: 67%;\n    margin-left: 0%;\n    margin-top: 8%;\n  }\n\n  & .rest {\n    margin-left: -47%;\n  }\n`;\n\nconst Trash = (props) => {\n  const { trash, setTrash } = props;\n\n  useEffect(() => {\n    if (trash.length === 0) {\n      axios.get('https://blooming-sierra-89816.herokuapp.com/api/v1/cards')\n        .then(resp => {\n          const cards = resp.data;\n          setTrash(cards.filter(card => {\n            return card.name === \"Trash\";\n          }));\n        });\n    };\n  }, []);\n\n  const renderTrash = () => {\n    return trash.map((card, index) => {\n      return  <Card \n                key={card.id} \n                card={card} \n                index={index} \n              />\n    });\n  };\n\n  return (\n    <TrashContainer>\n      {renderTrash()}\n    </TrashContainer>\n  );\n};\n\nfunction msp(state) {\n  const { trash } = state.supply;\n\n  return { trash: trash };\n};\n\nfunction mdp(dispatch) {\n  return {\n    setTrash: (trash) => {\n      dispatch({ type: \"TRASH\", payload: trash })\n    }\n  };\n};\n\nexport default connect(msp, mdp)(Trash);","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nconst CardInfoContainer = styled.div`\n  width: 14%;\n  height: 100%;\n  background: #00000033;\n  border: solid 1px #4c4c4c;\n  border-radius: 3px;\n  color: white;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst CardInfo = (props) => {\n  const { card } = props.hoverCard.props;\n\n  return (\n    <CardInfoContainer>\n      <h4>{card.name}</h4>\n      <p>{card.description}</p>\n      <p>Cost: {card.cost}</p>\n    </CardInfoContainer>\n  );\n};\n\nfunction msp(state) {\n  const { hoverCard } = state.supply;\n\n  return { hoverCard };\n};\n\nexport default connect(msp, null)(CardInfo);","import React from 'react';\nimport PlayerArea from './PlayerArea';\nimport SupplyArea from './SupplyArea';\nimport Trash from '../components/Trash';\nimport CardInfo from '../components/CardInfo';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\nconst PlayTableContainer = styled.div`\n  border-radius: 3px;\n  width: 100%;\n  height: 90%;\n  display: block;\n`;\n\nconst PlayerAreaContainer = styled.div`\n  border-radius: 3px;\n  width: 100%;\n  height: 36%;\n  background: #0000002b;\n  display: flex;\n`;\n\nconst PlayTable = (props) => {\n  return (\n    <PlayTableContainer>\n      <SupplyArea />\n      <PlayerAreaContainer>\n        <PlayerArea key=\"1\" player=\"1\" />\n          {\n            props.isHovered \n              ? <CardInfo key=\"card-info\" /> \n              : <Trash />\n          }\n        <PlayerArea key=\"2\" player=\"2\" />\n      </PlayerAreaContainer>\n    </PlayTableContainer>\n  );\n};\n\nfunction msp(state) {\n  const { isHovered } = state.supply;\n\n  return { isHovered };\n};\n\nexport default connect(msp, null)(PlayTable);\n\n","import React from 'react';\nimport './stylesheets/App.css';\nimport PlayTable from './containers/PlayTable';\nimport styled from 'styled-components';\n\nconst AppContainer = styled.div`\n  border: solid 1px #4c4c4c;\n  border-radius: 3px;\n  width: 100%;\n  height: 100vh;\n\n  & img {\n    border-radius: 3px;\n  }\n`;\n\nconst App = (props) => {\n  return (\n    <AppContainer>\n      <PlayTable />    \n    </AppContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState = {\n// PLAYER 1 TURN ON FALSE, PLAYER 2 TURN ON TRUE\n  playerTurn: false,\n  isHovered: false,\n  hoverCard: null,\n  mine: false,\n  remodel: false,\n  remodelGain: false,\n  remodelValue: 0,\n  workshop: false,\n  workshopGain: false,\n  militia: false,\n  militiaDiscardFirst: false,\n  militiaDiscardSecond: false,\n  cellar1: false,\n  cellar2: false,\n  cellarHand: [],\n  gameStart1: false,\n  gameStart2: false,\n\n  //CARD PILES\n  cellars: [],\n  moats: [],\n  workshops: [],\n  woodcutters: [],\n  villages: [],\n  militias: [],\n  smithys: [],\n  remodels: [],\n  markets: [],\n  mines: [],\n  coppers: [],\n  silvers: [],\n  golds: [],\n  estates: [],\n  duchys: [],\n  provinces: [],\n  trash: [],\n\n  emptyPiles: 0,\n  gameEnd: false,\n\n  // PLAYER 1 ARRAYS\n  deck1: [],\n  discard1: [],\n  hand1: [],\n  // PLAYER 2 ARRAYS\n  deck2: [],\n  discard2: [],\n  hand2: []\n\n}\n\nfunction supplyReducer(prevState=defaultState, action) {\n  let shuffle = require('shuffle-array')\n  switch (action.type) {\n    // INITIAL SUPPLY RENDER\n    case \"CELLARS\":\n      return {...prevState, cellars: action.payload }\n    case \"MOATS\":\n      return { ...prevState, moats: action.payload }\n    case \"WORKSHOPS\":\n      return { ...prevState, workshops: action.payload }\n    case \"WOODCUTTERS\":\n      return { ...prevState, woodcutters: action.payload }  \n    case \"VILLAGES\":\n      return { ...prevState, villages: action.payload }\n    case \"MILITIAS\":\n      return { ...prevState, militias: action.payload }\n    case \"SMITHYS\":\n      return { ...prevState, smithys: action.payload }\n    case \"REMODELS\":\n      return { ...prevState, remodels: action.payload }\n    case \"MARKETS\":\n      return { ...prevState, markets: action.payload }\n    case \"MINES\":\n      return { ...prevState, mines: action.payload }\n    case \"COPPERS\":\n      return {...prevState, coppers: action.payload}\n    case \"SILVERS\":\n      return { ...prevState, silvers: action.payload }\n    case \"GOLDS\":\n      return { ...prevState, golds: action.payload }\n    case \"ESTATES\":\n      return { ...prevState, estates: action.payload }\n    case \"DUCHYS\":\n      return { ...prevState, duchys: action.payload }\n    case \"PROVINCES\":\n      return { ...prevState, provinces: action.payload }\n    case \"TRASH\": {\n      return { ...prevState, trash: prevState.trash.concat(action.payload) }\n    }\n\n    // PLAYER ACTIONS\n    \n    //PLAYER 1 ENDS TURN\n    case \"TURN1\": {\n      let endHand = [...prevState.hand1]\n      let endDiscard = [...prevState.discard1.concat(endHand)]\n      let shuffleDeck = shuffle([...prevState.deck1.concat(endDiscard)])\n      return { \n        ...prevState, \n        playerTurn: !prevState.playerTurn, \n        discard1: prevState.deck1.length >= 5 ? prevState.discard1.concat(endHand) : [], \n        hand1: prevState.deck1.length >= 5 ? [...prevState.deck1.slice(-5)] : [...shuffleDeck.slice(-5)], \n        deck1: prevState.deck1.length >= 5 ? [...prevState.deck1.slice(0, -5)] : [...shuffleDeck.slice(0, -5)],\n        mine: false, \n        remodel: false, \n        remodelGain: false, \n        workshop: false, \n        workshopGain: false, \n        militia: false, \n        militiaDefend: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: false, \n        cellar1: false \n      }\n    }\n    //PLAYER 2 ENDS TURN\n    case \"TURN2\": {\n      let endHand = [...prevState.hand2]\n      let endDiscard = [...prevState.discard2.concat(endHand)]\n      let shuffleDeck = shuffle([...prevState.deck2.concat(endDiscard)])\n      return { \n        ...prevState, \n        playerTurn: !prevState.playerTurn, \n        discard2: prevState.deck2.length >= 5 ? prevState.discard2.concat(endHand) : [], \n        hand2: prevState.deck2.length >= 5 ? [...prevState.deck2.slice(-5)] : [...shuffleDeck.slice(-5)], \n        deck2: prevState.deck2.length >= 5 ? [...prevState.deck2.slice(0, -5)] : [...shuffleDeck.slice(0, -5)],\n        mine: false, \n        remodel: false, \n        remodelGain: false, \n        workshop: false, \n        workshopGain: false, \n        militia: false, \n        militiaDefend: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: false, \n        cellar2: false,\n        cellarHand: [] \n      }\n    }\n\n    //PLAYER 1 CLICKS TREASURE CARD IN HAND TO PLAY\n    case \"PLAY_TREASURE1\":\n      return {\n        ...prevState, \n        discard1: prevState.discard1.concat(action.payload), \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id) \n      }\n\n    //PLAYER 2 CLICKS TREASURE CARD IN HAND TO PLAY\n    case \"PLAY_TREASURE2\":\n      return { \n        ...prevState, \n        discard2: prevState.discard2.concat(action.payload), \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id) \n      }\n    //PLAYER 1 BUYS CARD FROM SUPPLY\n    case \"BUY1\": {\n      let pile = Object.keys(prevState).find(key => key == `${action.payload.name.toLowerCase()}s`)\n      //IF CARD CLICKED IS PROVINCE, ADD PROVINCE TO PLAYER 1 DISCARD\n      if (prevState[pile].length > 1 && pile !== \"provinces\") {\n        return { \n          ...prevState, \n          discard1: prevState.discard1.concat(action.payload), \n          [pile]: prevState[pile].filter(card => card.id !== action.payload.id) \n        }\n      }\n      //IF CARD CLICKED IS LAST IN PILE AND PILE IS NOT PROVINCE PILE... \n      else if (prevState[pile].length === 1 && pile !== \"provinces\") {\n        //IF NUM OF EMPTY PILES LESS THAN 2, ADD CARD TO P1 DISCARD AND INCREMENT NUMBER OF EMPTY PILES\n        if (prevState.emptyPiles < 2) {\n          return { \n            ...prevState, \n            discard1: prevState.discard1.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n            emptyPiles: prevState.emptyPiles + 1 \n          }\n        } \n        //IF PILE IS THIRD EMPTY PILE, TRIGGER GAME END\n        else {\n          return { \n            ...prevState, \n            discard1: prevState.discard1.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n            gameEnd: true \n          }\n        }\n      } \n      //IF PILE IS PROVINCES...\n      else if (pile === \"provinces\") {\n        //IF MORE THAN ONE PROVINCE LEFT IN PILE, ADD PROVINCE TO PLAYER 1 DISCARD\n        if (prevState[pile].length > 1) {\n          return { \n            ...prevState, \n            discard1: prevState.discard1.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id) \n          }\n        } \n        //IF LAST PROVINCE, TRIGGER GAME END\n        else {\n            return { \n              ...prevState, \n              discard1: prevState.discard1.concat(action.payload), \n              [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n              gameEnd: true \n            }\n          }\n      } \n    }\n    //PLAYER 2 BUYS CARD FROM SUPPLY\n    case \"BUY2\": {\n      let pile = Object.keys(prevState).find(key => key == `${action.payload.name.toLowerCase()}s`)\n      //IF CARD CLICKED IS PROVINCE, ADD PROVINCE TO PLAYER 2 DISCARD\n      if (prevState[pile].length > 1 && pile !== \"provinces\") {\n        return { \n          ...prevState, \n          discard2: prevState.discard2.concat(action.payload), \n          [pile]: prevState[pile].filter(card => card.id !== action.payload.id)\n        }   \n      } \n      //IF CARD CLICKED IS LAST IN PILE AND PILE IS NOT PROVINCE PILE... \n      else if (prevState[pile].length === 1 && pile !== \"provinces\") {\n        //IF NUM OF EMPTY PILES LESS THAN 2, ADD CARD TO P2 DISCARD AND INCREMENT NUMBER OF EMPTY PILES\n        if (prevState.emptyPiles < 3) {\n          return { \n            ...prevState, \n            discard2: prevState.discard2.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n            emptyPiles: prevState.emptyPiles + 1 \n          }   \n        } \n        //IF PILE IS THIRD EMPTY PILE, TRIGGER GAME END\n        else {\n          return { \n            ...prevState, \n            discard2: prevState.discard2.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n            gameEnd: true \n          }   \n        }\n      } \n      //IF PILE IS PROVINCES...\n      else if (pile === \"provinces\") {\n        //IF MORE THAN ONE PROVINCE LEFT IN PILE, ADD PROVINCE TO PLAYER 2 DISCARD\n        if (prevState[pile].length > 1) {\n          return { \n            ...prevState, \n            discard2: prevState.discard2.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id) \n          }   \n        } \n        //IF LAST PROVINCE, TRIGGER GAME END\n        else {\n          return { \n            ...prevState, \n            discard2: prevState.discard2.concat(action.payload), \n            [pile]: prevState[pile].filter(card => card.id !== action.payload.id), \n            gameEnd: true \n          }   \n        }\n      }\n    }\n    //PLAYER 1 CLICKS ACTION CARD IN HAND TO PLAY IT, CARD MOVED FROM HAND TO DISCARD\n    case \"ACTION1\": \n        return { \n          ...prevState, \n          discard1: prevState.discard1.concat(action.payload), \n          hand1: prevState.hand1.filter(card => card.id !== action.payload.id) \n        }\n    //PLAYER 2 CLICKS ACTION CARD IN HAND TO PLAY IT, CARD MOVED FROM HAND TO DISCARD\n    case \"ACTION2\": \n        return { \n          ...prevState, \n          discard2: prevState.discard2.concat(action.payload), \n          hand2: prevState.hand2.filter(card => card.id !== action.payload.id) \n        }\n    //AFTER PLAYER 1 PLAYS MINE CARD, PLAYER CLICKS TREASURE CARD IN HAND TO TRASH AND SWAP FOR HIGHER VALUE TREASURE CARD, MINE SWITCHED BACK TO FALSE\n    case \"TRASH_TREASURE1\": {\n      let pile = action.treasure\n      return { \n        ...prevState, \n        trash: prevState.trash.concat(action.payload), \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id).concat(prevState[pile].slice(-1)), \n        [pile]: prevState[pile].slice(0, -1), \n        mine: false \n      }  \n    }\n    //AFTER PLAYER 2 PLAYS MINE CARD, PLAYER CLICKS TREASURE CARD IN HAND TO TRASH AND SWAP FOR HIGHER VALUE TREASURE CARD, MINE SWITCHED BACK TO FALSE\n    case \"TRASH_TREASURE2\": {\n      let pile = action.treasure\n      return { \n        ...prevState, \n        trash: prevState.trash.concat(action.payload), \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id).concat(prevState[pile].slice(-1)), \n        [pile]: prevState[pile].slice(0, -1), \n        mine: false \n      }  \n    }\n    //AFTER PLAYER 1 PLAYS REMODEL CARD, PLAYER CLICKS CARD IN HAND TO TRASH AND SWAP FOR SUPPLY CARD WORTH TWO MORE\n    case \"TRASH_REMODEL1\": {\n      return { \n        ...prevState, \n        remodel: false, \n        remodelGain: true, \n        trash: prevState.trash.concat(action.payload), \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id), \n        remodelValue: action.payload.cost + 2  \n      }\n    }\n    //AFTER PLAYER 2 PLAYS REMODEL CARD, PLAYER CLICKS CARD IN HAND TO TRASH AND SWAP FOR SUPPLY CARD WORTH TWO MORE\n    case \"TRASH_REMODEL2\": {\n      return { \n        ...prevState, \n        remodel: false, \n        remodelGain: true, \n        trash: prevState.trash.concat(action.payload), \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id), \n        remodelValue: action.payload.cost + 2 \n      }\n    }\n    case \"GAIN_REMODEL1\": {\n      let pile = `${action.payload.name.toLowerCase()}s`\n      return { \n        ...prevState, \n        remodelGain: false, \n        [pile]: prevState[pile].slice(0, -1), \n        discard1: prevState.discard1.concat(prevState[pile].slice(-1)) \n      }\n    }\n    case \"GAIN_REMODEL2\": {\n      let pile = `${action.payload.name.toLowerCase()}s`\n      return { \n        ...prevState, \n        remodelGain: false, \n        [pile]: prevState[pile].slice(0, -1), \n        discard2: prevState.discard2.concat(prevState[pile].slice(-1)) \n      }\n    }\n    case \"GAIN_WORKSHOP1\": {\n      let pile = `${action.payload.name.toLowerCase()}s`\n      return { \n        ...prevState, \n        workshop: false, \n        [pile]: prevState[pile].slice(0, -1), \n        discard1: prevState.discard1.concat(prevState[pile].slice(-1)) \n      }\n    }\n    case \"GAIN_WORKSHOP2\": {\n      let pile = `${action.payload.name.toLowerCase()}s`\n      return { \n        ...prevState, \n        workshop: false, \n        [pile]: prevState[pile].slice(0, -1), \n        discard2: prevState.discard2.concat(prevState[pile].slice(-1)) \n      }\n    }\n    case \"MILITIA_DISCARD_FIRST1\": {\n      return { \n        ...prevState, \n        militia: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: true, \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id), \n        discard2: prevState.discard2.concat(action.payload) \n      }\n    }\n    case \"MILITIA_DISCARD_FIRST2\": {\n      return { \n        ...prevState, \n        militia: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: true, \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id), \n        discard1: prevState.discard1.concat(action.payload) \n      }\n    }\n    case \"MILITIA_DISCARD_SECOND1\": {\n      return { \n        ...prevState, \n        militiaDiscardSecond: false, \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id), \n        discard2: prevState.discard2.concat(action.payload) \n      }\n    }\n    case \"MILITIA_DISCARD_SECOND2\": {\n      return { \n        ...prevState, \n        militiaDiscardSecond: false, \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id), \n        discard1: prevState.discard1.concat(action.payload) \n      }\n    }\n    case \"MILITIA_DEFEND1\": {\n      return { \n        ...prevState, \n        militia: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: false, \n        hand2: prevState.hand2.filter(card => card.id !== action.payload.id), \n        discard2: prevState.discard2.concat(action.payload) \n      }\n    }\n    case \"MILITIA_DEFEND2\": {\n      return { \n        ...prevState, \n        militia: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: false, \n        hand1: prevState.hand1.filter(card => card.id !== action.payload.id), \n        discard1: prevState.discard1.concat(action.payload) \n      }\n    }\n    case \"MILITIA_BREAK\": {\n      return { \n        ...prevState, \n        militia: false, \n        militiaDiscardFirst: false, \n        militiaDiscardSecond: false \n      }\n    }\n    case \"DEAL1\":\n      return { \n        ...prevState, \n        deck1: shuffle(prevState.estates.slice(-3).concat(prevState.coppers.slice(-7))), \n        estates: prevState.estates.slice(0, -3), \n        coppers: prevState.coppers.slice(0, -7) \n      }\n    case \"DEAL2\":\n      return { \n        ...prevState, \n        deck2: shuffle(prevState.estates.slice(-3).concat(prevState.coppers.slice(-7))), \n        estates: prevState.estates.slice(0, -3), \n        coppers: prevState.coppers.slice(0, -7) \n      }\n    case \"CYCLE1\": {\n      return { \n        ...prevState, \n        deck1: shuffle(prevState.discard1), \n        discard1: [] \n      }\n    }\n    case \"CYCLE2\": {\n      return { \n        ...prevState, \n        deck2: shuffle(prevState.discard2), \n        discard2: [] \n      }\n    }\n    case \"DRAW1\": {\n      if (prevState.deck1.length >= 5) {\n        return { \n          ...prevState, \n          hand1: prevState.deck1.slice(-5), \n          deck1: prevState.deck1.slice(0, -5), \n          gameStart1: true \n        }\n      } else {\n        return { \n          ...prevState, \n          deck1: shuffle(prevState.deck1.concat(prevState.discard1)), \n          discard1: [] \n        }\n      }\n    }\n    case \"DRAW2\":\n      if (prevState.deck2.length >= 5) {\n        return { \n          ...prevState, \n          hand2: prevState.deck2.slice(-5), \n          deck2: prevState.deck2.slice(0, -5), \n          gameStart2: true \n        }\n      } else {\n        return { \n          ...prevState, \n          deck2: shuffle(prevState.deck2.concat(prevState.discard2)), \n          discard2: [] \n        }\n      }\n    case \"CELLAR_DISCARD1\": {\n      if (prevState.cellarHand.includes(action.payload)) {\n        if (prevState.deck1.length >= 1) {\n          return { \n            ...prevState, \n            hand1: prevState.hand1.filter(card => card.id !== action.payload.id).concat(prevState.deck1.slice(-1)), \n            discard1: prevState.discard1.concat(action.payload), \n            deck1: prevState.deck1.slice(0, -1) \n          }\n        } else {\n            let cycleHand = prevState.hand1.filter(card => card.id !== action.payload.id)\n            let cycleDiscard = prevState.discard1.concat(action.payload)\n            let shuffleDeck = shuffle(cycleDiscard)\n            return {\n              ...prevState,\n              hand1: cycleHand.concat(shuffleDeck.slice(-1)),\n              deck1: shuffleDeck.slice(0, -1),\n              discard1: []\n          }\n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"CELLAR_DISCARD2\": {\n      if (prevState.cellarHand.includes(action.payload)) {\n        if (prevState.deck2.length >= 1) {\n          return { \n            ...prevState, \n            hand2: prevState.hand2.filter(card => card.id !== action.payload.id).concat(prevState.deck2.slice(-1)), \n            discard2: prevState.discard2.concat(action.payload), \n            deck2: prevState.deck2.slice(0, -1) \n          }\n        } else {\n            let cycleHand = prevState.hand2.filter(card => card.id !== action.payload.id)\n            let cycleDiscard = prevState.discard2.concat(action.payload)\n            let shuffleDeck = shuffle(cycleDiscard) \n            return {\n              ...prevState,\n              hand2: cycleHand.concat(shuffleDeck.slice(-1)),\n              deck2: shuffleDeck.slice(0, -1),\n              discard2: []\n          }\n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"END_CELLAR1\":\n      return { ...prevState, cellar1: false }\n    case \"END_CELLAR2\":\n      return { ...prevState, cellar2: false }\n    // CARD TRIGGERS\n    case \"+1CARD1\": {\n      if (prevState.deck1.length > 0) {\n        return { \n          ...prevState, \n          hand1: prevState.hand1.concat(prevState.deck1.slice(-1)), \n          deck1: prevState.deck1.slice(0, -1) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard1)\n        return { \n          ...prevState,\n          hand1: prevState.hand1.concat(shuffleDeck.slice(-1)), \n          deck1: shuffleDeck.slice(0, -1), \n          discard1: [] \n        }\n      }\n    }\n    case \"+2CARDS1\": {\n      if (prevState.deck1.length > 1) {\n        return { \n          ...prevState, \n          hand1: prevState.hand1.concat(prevState.deck1.slice(-2)), \n          deck1: prevState.deck1.slice(0, -2) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard1)\n        return {\n          ...prevState,\n          hand1: prevState.hand1.concat(shuffleDeck.slice(-2)),\n          deck1: shuffleDeck.slice(0, -2),\n          discard1: []\n        }\n      }\n    }\n    case \"+3CARDS1\": {\n      if (prevState.deck1.length > 2) {\n        return { \n          ...prevState, \n          hand1: prevState.hand1.concat(prevState.deck1.slice(-3)), \n          deck1: prevState.deck1.slice(0, -3) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard1)\n        return {\n          ...prevState,\n          hand1: prevState.hand1.concat(shuffleDeck.slice(-3)),\n          deck1: shuffleDeck.slice(0, -3),\n          discard1: []\n        }\n      }\n    }\n    case \"+1CARD2\": {\n      if (prevState.deck2.length > 0) {\n        return { \n          ...prevState, \n          hand2: prevState.hand2.concat(prevState.deck2.slice(-1)), \n          deck2: prevState.deck2.slice(0, -1) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard2)\n        return {\n          ...prevState,\n          hand2: prevState.hand2.concat(shuffleDeck.slice(-1)),\n          deck2: shuffleDeck.slice(0, -1),\n          discard2: []\n        }\n      }\n    }\n    case \"+2CARDS2\": {\n      if (prevState.deck2.length > 1) {\n        return { \n          ...prevState, \n          hand2: prevState.hand2.concat(prevState.deck2.slice(-2)), \n          deck2: prevState.deck2.slice(0, -2) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard2)\n        return {\n          ...prevState,\n          hand2: prevState.hand2.concat(shuffleDeck.slice(-2)),\n          deck2: shuffleDeck.slice(0, -2),\n          discard2: []\n        }\n      }\n    }\n    case \"+3CARDS2\": {\n      if (prevState.deck2.length > 2) {\n        return { \n          ...prevState, \n          hand2: prevState.hand2.concat(prevState.deck2.slice(-3)), \n          deck2: prevState.deck2.slice(0, -3) \n        }\n      } else {\n        let shuffleDeck = shuffle(prevState.discard2)\n        return {\n          ...prevState,\n          hand2: prevState.hand2.concat(shuffleDeck.slice(-3)),\n          deck2: shuffleDeck.slice(0, -3),\n          discard2: []\n        }\n      }\n    }\n    case \"MINE1\": {\n      if (prevState.hand1.some(card => card.name === \"Copper\" || card.name === \"Silver\")) {\n        return { \n          ...prevState, \n          mine: true \n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"MINE2\": {\n      if (prevState.hand2.some(card => card.name === \"Copper\" || card.name === \"Silver\")) {\n        return { \n          ...prevState, \n          mine: true \n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"REMODEL1\": {\n      if (prevState.hand1.length > 0) {\n        return { \n          ...prevState, \n          remodel: true \n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"REMODEL2\": {\n      if (prevState.hand2.length > 0) {\n        return { \n          ...prevState, \n          remodel: true\n        }\n      } else {\n        return {\n          ...prevState\n        }\n      }\n    }\n    case \"WORKSHOP1\":\n      return { \n        ...prevState, \n        workshop: true \n      }\n    case \"WORKSHOP2\":\n      return { \n        ...prevState, \n        workshop: true \n      }\n    case \"ATTACK1\": {\n      if (prevState.hand2.length > 3) {\n        return { \n          ...prevState, \n          militia: true, \n          militiaDiscardFirst: true \n        }\n      } else {\n        return { \n          ...prevState \n        }\n      }\n    }\n    case \"ATTACK2\": {\n      if (prevState.hand1.length > 3) {\n        return { \n          ...prevState, \n          militia: true, \n          militiaDiscardFirst: true \n        }\n      } else {\n        return { \n          ...prevState \n        }\n      }\n      }\n    case \"CELLAR1\":\n      return { \n        ...prevState, \n        cellar1: true, \n        cellarHand: [...prevState.hand1] \n      }\n    case \"CELLAR2\":\n      return { \n        ...prevState, \n        cellar2: true, \n        cellarHand: [...prevState.hand2] \n      }\n    case \"HOVER_ON\":\n      return { \n        ...prevState, \n        isHovered: true, \n        hoverCard: action.payload \n      }\n    case \"HOVER_OFF\":\n      return { \n        ...prevState, \n        isHovered: false, \n        hoverCard: action.payload \n      }\n    default:\n      return prevState\n  }\n\n}\n\nexport default supplyReducer ","const defaultState = {\n  playerTurn: false,\n  gameEnd: false,\n}\n\n//Player 1 turn on false, Player 2 turn on true\nfunction gameReducer(prevState=defaultState, action) {\n  switch (action.type) {\n    case \"TURN1\":\n      return { ...prevState, playerTurn: !prevState.playerTurn}\n    case \"TURN2\":\n      return { ...prevState, playerTurn: !prevState.playerTurn }\n    case \"END\":\n      return {...prevState, gameEnd: true}\n    default:\n      return prevState\n  }\n\n}\n\nexport default gameReducer ","const defaultState = {\n  actions1: 1,\n  buys1: 1,\n  wallet1: 0,\n  victoryPoints1: 3,\n  turns1: 0\n}\n\nfunction playerOneReducer(prevState = defaultState, action) {\n  switch (action.type) {\n    case \"PLAY_TREASURE1\":\n      return { ...prevState, wallet1: prevState.wallet1 + action.payload.value }\n    case \"BUY1\": {\n      if (action.payload.card_type === \"Victory\") {\n        return { ...prevState, wallet1: prevState.wallet1 - action.payload.cost, buys1: prevState.buys1 - 1, victoryPoints1: prevState.victoryPoints1 + action.payload.victory_points }\n      }\n      else {\n        return { ...prevState, wallet1: prevState.wallet1 - action.payload.cost, buys1: prevState.buys1 - 1 }\n      }\n    }\n    case \"TURN1\":\n      return { ...prevState, actions1: 1, buys1: 1, wallet1: 0, turns1: prevState.turns1 + 1 }\n    case \"ACTION1\": \n        return { ...prevState, actions1: prevState.actions1 - 1 }\n    case \"+1ACTION1\":\n      return { ...prevState, actions1: prevState.actions1 + 1 }\n    case \"+2ACTIONS1\":\n      return { ...prevState, actions1: prevState.actions1 + 2 }\n    case \"+1BUY1\":\n      return { ...prevState, buys1: prevState.buys1 + 1 }\n    case \"+1WALLET1\":\n      return { ...prevState, wallet1: prevState.wallet1 + 1 }\n    case \"+2WALLET1\":\n      return { ...prevState, wallet1: prevState.wallet1 + 2 }\n    case \"TRASH_REMODEL1\":\n      return { ...prevState, victoryPoints1: prevState.victoryPoints1 - action.payload.victory_points }\n    case \"GAIN_REMODEL1\": {\n      if (action.payload.card_type === \"Victory\") {\n        return { ...prevState, victoryPoints1: prevState.victoryPoints1 + action.payload.victory_points }\n      }\n    }\n    default:\n      return prevState\n  }\n\n}\n\nexport default playerOneReducer","const defaultState = {\n  actions2: 1,\n  buys2: 1,\n  wallet2: 0,\n  victoryPoints2: 3,\n  turns2: 0\n}\n\nfunction playerTwoReducer(prevState=defaultState, action) {\n\n  switch (action.type) {\n    case \"PLAY_TREASURE2\":\n      return { ...prevState, wallet2: prevState.wallet2 + action.payload.value }\n    case \"BUY2\": {\n      if (action.payload.card_type === \"Victory\") {\n        return { ...prevState, wallet2: prevState.wallet2 - action.payload.cost, buys2: prevState.buys2 - 1, victoryPoints2: prevState.victoryPoints2 + action.payload.victory_points }\n      }\n      else {\n        return { ...prevState, wallet2: prevState.wallet2 - action.payload.cost, buys2: prevState.buys2 - 1 }\n      }\n    }\n    case \"TURN2\":\n      return { ...prevState, actions2: 1, buys2: 1, wallet2: 0, turns2: prevState.turns2 + 1 }\n    case \"ACTION2\": \n        return { ...prevState, actions2: prevState.actions2 - 1 }    \n    case \"+1ACTION2\":\n      return { ...prevState, actions2: prevState.actions2 + 1 }\n    case \"+2ACTIONS2\":\n      return { ...prevState, actions2: prevState.actions2 + 2 }\n    case \"+1BUY2\":\n      return { ...prevState, buys2: prevState.buys2 + 1 }\n    case \"+1WALLET2\":\n      return { ...prevState, wallet2: prevState.wallet2 + 1 }\n    case \"+2WALLET2\":\n      return { ...prevState, wallet2: prevState.wallet2 + 2 }\n    case \"TRASH_REMODEL2\":\n      return { ...prevState, victoryPoints2: prevState.victoryPoints2 - action.payload.victory_points }\n    case \"GAIN_REMODEL2\": {\n      if (action.payload.card_type === \"Victory\") {\n        return { ...prevState, victoryPoints2: prevState.victoryPoints2 + action.payload.victory_points }\n      }\n    }\n    default:\n      return prevState\n  }\n\n}\n\nexport default playerTwoReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport supplyReducer from './reducers/supplyreducer';\nimport gameReducer from './reducers/gamereducer';\nimport playerOneReducer from './reducers/playeronereducer';\nimport playerTwoReducer from './reducers/playertworeducer';\n\nconst rootReducer = combineReducers({\n  supply: supplyReducer, \n  game: gameReducer, \n  playerOne: playerOneReducer, \n  playerTwo: playerTwoReducer\n});\n\nconst store = createStore(rootReducer);\nexport default store;\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}